#!/usr/bin/env python
import re
import sys
from subprocess import *

from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import *

from PyKDE4.kdecore import *
from PyKDE4.kdeui import *

import pkgmanager

HTML_HEADER=u"""
<html>
<head>
<style>
h1 {
    font-size: 100%;
    margin: 0;
    padding: 0;
}

.subtitle {
    font-size: 100%;
    padding-bottom: 12px;
}

p {
    margin: 0;
    padding: 0;
}

.action {
    float: right;
}

body {
    margin: 4px;
}

.package {
    padding-bottom: 6px;
    margin-bottom: 6px;
    border-bottom: 1px dotted #ccc;
}

.error {
    margin-top: 12px;
    background-color: #fcc;
    border: 1px solid red;
    line-height: 150%;
    padding: 8px;
}

.information {
    background-color: #cfc;
    border: 1px solid green;
    line-height: 150%;
    margin-top: 12px;
    padding: 8px;
}

</style>
</head>
<body>
"""

HTML_FOOTER=u"""
</body>
</html>
"""

HTML_WELCOME=u"""
<div class='information'>
<p>Welcome to Kapti, a simple tool to install or remove packages.</p>

<p>To get started, enter a search term in the field above and press Enter.</p>
</div>
"""

def generateHtmlForPackageListItem(name, description):
    actionLink = createInstallRemoveLink(name)
    return u"""<div class='package'>
    <h1><a href='info:%(name)s'>%(name)s</a></h1>
    <span class='action'>%(actionLink)s</a></span>
    <p>%(description)s.</p>
    </div>""" % locals()


def install(name):
    comment = i18n("Kapti needs your password to install %1.", name)
    runApt(comment, pkgmanager.installCommand(name))


def remove(name):
    comment = i18n("Kapti needs your password to remove %1.", name)
    runApt(comment, pkgmanager.removeCommand(name))


def runApt(comment, cmd):
    cmd = "xterm -e '%s'" % cmd
    call(["kdesudo", "-d", "--comment", comment, "-c", cmd])


def htmlize(text):
    text = text.replace("\n", "<br>")
    return unicode(KStringHandler.tagUrls(text))


def createInstallRemoveLink(name):
    if pkgmanager.isPackagedInstalled(name):
        url = "remove:" + name
        text = i18n("Remove")
    else:
        url = "install:" + name
        text = i18n("Install")
    return "<a href='%s'>%s</a>" % (url, text)


class Window(QWidget):
    def __init__(self):
        QWidget.__init__(self)
        self.search = KLineEdit(self)
        self.search.setClickMessage(i18n("Search"))
        self.packageView = QWebView(self)
        self.packageView.page().setLinkDelegationPolicy(QWebPage.DelegateAllLinks)
        self.packageView.setHtml(HTML_HEADER + HTML_WELCOME + HTML_FOOTER)
        layout = QVBoxLayout(self)
        layout.addWidget(self.search)
        layout.addWidget(self.packageView)

        QObject.connect(self.search, SIGNAL("returnPressed()"), self.startSearch)

        QObject.connect(self.packageView, SIGNAL("linkClicked(const QUrl&)"), self.slotLinkClicked)

    def startSearch(self):
        criterias = unicode(self.search.text()).split(" ")
        packages = pkgmanager.searchPackages(criterias)

        if len(packages) > 0:
            lst = []
            for name, description in packages:
                lst.append(generateHtmlForPackageListItem(name, description))
            content = "".join(lst)
        else:
            content = "<div class='error'>%s</div>" % i18n("Sorry, could not find any package matching \"%1\".", " ".join(criterias))

        html = HTML_HEADER + content + HTML_FOOTER
        self.packageView.setHtml(html)

    def slotLinkClicked(self, url):
        action = unicode(url.scheme())
        path = unicode(url.path())
        if action == "install":
            install(path)
            self.startSearch()
        elif action == "remove":
            remove(path)
            self.startSearch()
        elif action == "info":
            self.showInfo(path)
        elif action == "back":
            self.startSearch()
        else:
            QDesktopServices.openUrl(url)


    def showInfo(self, name):
        info = pkgmanager.getPackageInfo(name)
        actionLink = createInstallRemoveLink(name)
        lst = []
        for key in "Section", \
            "Depends", "Suggests", "Recommends", \
            "Conflicts", "Replaces", "Bugs":
            if key in info:
                value = htmlize(info[key])
                lst.append("<dt>%s</dt><dd>%s</dd>" % (key, value))

        version = info["Version"]
        if "Homepage" in info:
            site = "<div class='site'>" + htmlize(info["Homepage"]) + "</div>"
        else:
            site = ""
        subtitle, description = info["Description"].split("\n", 1)

        html = HTML_HEADER \
            + "<span class='action'><a href='back:'>Back</a> | %s</span>" % actionLink \
            + "<h1>%s %s</h1>" % (name, version) \
            + site \
            + "<div class='subtitle'>" + htmlize(subtitle) + "</div>" \
            + "<div class='description'>" + htmlize(description) + "</div>" \
            + "<dl>" + "".join(lst) + "</dl>" + HTML_FOOTER
        self.packageView.setHtml(html)


def main():
    KCmdLineArgs.init(sys.argv,
        "kapti",
        "",
        ki18n("Kapti"),
        "1.0",
        ki18n("Super simple frontend to install and remove packages"))
    app = KApplication()
    window = Window()

    window.show()
    app.exec_()
    return 0


if __name__=="__main__":
    sys.exit(main())
# vi: ts=4 sw=4 et
