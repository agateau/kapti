#!/usr/bin/env python
import re
import sys
from subprocess import *

from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import *

from PyKDE4.kdecore import *
from PyKDE4.kdeui import *

import pkgmanager

HTML_HEADER=u"""
<html>
<head>
<style>
h1 {
    font-size: 100%;
    margin: 0;
    padding: 0;
}

.subtitle {
    font-size: 100%;
    padding-bottom: 12px;
}

p {
    margin: 0;
    padding: 0;
}

.action {
    float: right;
}

body {
    margin: 4px;
}

.package {
    padding-bottom: 6px;
    margin-bottom: 6px;
    border-bottom: 1px dotted #ccc;
}

.error {
    margin-top: 12px;
    background-color: #fcc;
    border: 1px solid red;
    line-height: 150%;
    padding: 8px;
}

.information {
    background-color: #cfc;
    border: 1px solid green;
    line-height: 150%;
    margin-top: 12px;
    padding: 8px;
}

</style>
</head>
<body>
"""

HTML_FOOTER=u"""
</body>
</html>
"""

HTML_WELCOME=u"""
<div class='information'>
<p>Welcome to Kapti, a simple tool to install or remove packages.</p>

<p>To get started, enter a search term in the field above and press Enter.</p>
</div>
"""

def generateHtmlForPackageListItem(name, description):
    actionLink = createInstallRemoveLink(name)
    return u"""<div class='package'>
    <h1><a href='info:%(name)s'>%(name)s</a></h1>
    <span class='action'>%(actionLink)s</a></span>
    <p>%(description)s.</p>
    </div>""" % locals()


def htmlize(text):
    text = text.replace("\n", "<br>")
    return unicode(KStringHandler.tagUrls(text))


PKG_RX = re.compile(r"(^| )([a-z0-9][-+a-z0-9]*\w)")
def pkgHtmlize(text):
    return PKG_RX.sub(r"\1<a href='info:\2'>\2</a>", text)


def createInstallRemoveLink(name):
    if pkgmanager.isPackageInstalled(name):
        url = "remove:" + name
        text = i18n("Remove")
    else:
        url = "install:" + name
        text = i18n("Install")
    return "<a href='%s'>%s</a>" % (url, text)


class Window(KMainWindow):
    def __init__(self):
        KMainWindow.__init__(self)
        self.history = [QUrl("welcome:/")]
        self.posInHistory = 0
        self.createActions()
        self.createUi()
        self.refresh()

    def createActions(self):
        self.backAction = KStandardAction.back(self.goBack, self)
        self.forwardAction = KStandardAction.forward(self.goForward, self)

    def createUi(self):
        self.toolBar().addAction(self.backAction)
        self.toolBar().addAction(self.forwardAction)

        self.searchLineEdit = KLineEdit(self)
        self.searchLineEdit.setClickMessage(i18n("Search"))
        self.toolBar().addWidget(self.searchLineEdit)

        self.packageView = QWebView(self)
        self.packageView.page().setLinkDelegationPolicy(QWebPage.DelegateAllLinks)
        self.setCentralWidget(self.packageView)

        QObject.connect(self.searchLineEdit, SIGNAL("returnPressed()"), self.startSearch)

        QObject.connect(self.packageView, SIGNAL("linkClicked(const QUrl&)"), self.openUrl)

        self.updateHistoryActions()
        self.searchLineEdit.setFocus()

    def updateHistoryActions(self):
        self.backAction.setEnabled(self.posInHistory > 0)
        self.forwardAction.setEnabled(self.posInHistory < len(self.history) - 1)

    def goBack(self):
        self.posInHistory -= 1
        self.refresh()
        self.updateHistoryActions()

    def goForward(self):
        self.posInHistory += 1
        self.refresh()
        self.updateHistoryActions()

    def startSearch(self):
        criterias = self.searchLineEdit.text()
        self.openUrl(QUrl("search:" + criterias))

    def refresh(self):
        self.openUrl(self.history[self.posInHistory], addToHistory=False)

    def openUrl(self, url, addToHistory=True):
        action = unicode(url.scheme())
        path = unicode(url.path())

        if action == "install":
            self.install(path)
            return
        if action == "remove":
            self.remove(path)
            return

        try:
            method = getattr(self, "url_" + action)
        except AttributeError:
            method = None

        if method:
            method(path)
            if addToHistory:
                self.history = self.history[:self.posInHistory + 1]
                self.history.append(url)
                self.posInHistory += 1
                self.updateHistoryActions()
        else:
            QDesktopServices.openUrl(url)

    def install(self, name):
        comment = i18n("Kapti needs your password to install %1.", name)
        self.installRemove(comment, pkgmanager.installCommand(name))

    def remove(self, name):
        comment = i18n("Kapti needs your password to remove %1.", name)
        self.installRemove(comment, pkgmanager.removeCommand(name))

    def installRemove(self, comment, cmd):
        cmd = "xterm -e '%s'" % cmd
        call(["kdesudo", "-d", "--comment", comment, "-c", cmd])
        pkgmanager.updateInstalledPackageList()
        self.refresh()

    def url_welcome(self, arg):
        self.packageView.setHtml(HTML_HEADER + HTML_WELCOME + HTML_FOOTER)

    def url_search(self, arg):
        criterias = arg.split(" ")
        packages = pkgmanager.searchPackages(criterias)
        if len(packages) > 0:
            lst = []
            for name, description in packages:
                lst.append(generateHtmlForPackageListItem(name, description))
            content = "".join(lst)
        else:
            content = "<div class='error'>%s</div>" % i18n("Sorry, could not find any package matching \"%1\".", " ".join(criterias))

        html = HTML_HEADER + content + HTML_FOOTER
        self.packageView.setHtml(html)

    def url_info(self, name):
        info = pkgmanager.getPackageInfo(name)
        actionLink = createInstallRemoveLink(name)
        lst = []
        for key in "Section", \
            "Depends", "Suggests", "Recommends", \
            "Conflicts", "Replaces", "Bugs":
            if key in info:
                value = info[key]
                if key in ("Depends", "Suggests", "Recommends", "Conflicts", "Replaces"):
                    value = pkgHtmlize(value)
                else:
                    value = htmlize(value)
                lst.append("<dt>%s</dt><dd>%s</dd>" % (key, value))

        version = info["Version"]
        if "Homepage" in info:
            site = "<div class='site'>" + htmlize(info["Homepage"]) + "</div>"
        else:
            site = ""
        subtitle, description = info["Description"].split("\n", 1)

        html = HTML_HEADER \
            + "<span class='action'>%s</span>" % actionLink \
            + "<h1>%s %s</h1>" % (name, version) \
            + site \
            + "<div class='subtitle'>" + htmlize(subtitle) + "</div>" \
            + "<div class='description'>" + htmlize(description) + "</div>" \
            + "<dl>" + "".join(lst) + "</dl>" + HTML_FOOTER
        self.packageView.setHtml(html)


def main():
    KCmdLineArgs.init(sys.argv,
        "kapti",
        "",
        ki18n("Kapti"),
        "1.0",
        ki18n("Super simple frontend to install and remove packages"))

    options = KCmdLineOptions()
    options.add("+[search terms]", ki18n("Search terms"))
    KCmdLineArgs.addCmdLineOptions(options)

    app = KApplication()

    window = Window()
    args = KCmdLineArgs.parsedArgs()
    if args.count() > 0:
        lst = []
        for pos in range(args.count()):
            lst.append(unicode(args.arg(pos)))
        window.searchLineEdit.setText(" ".join(lst))
        QTimer.singleShot(0, window.startSearch)

    window.show()
    app.exec_()
    return 0


if __name__=="__main__":
    sys.exit(main())
# vi: ts=4 sw=4 et
