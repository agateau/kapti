#!/usr/bin/env python
# encoding: utf-8
import os
import re
import sys
from subprocess import *

from jinja2 import Environment, FileSystemLoader

from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import *

from PyKDE4.kdecore import *
from PyKDE4.kdeui import *

import pkgmanager


def htmlize(text):
    text = text.replace("\n", "<br>")
    return unicode(KStringHandler.tagUrls(text))


def extractDescription(info):
    subtitle = ""
    description = ""

    for field in info.keys():
        if field == "Description" or field.startswith("Description-"):
            subtitle, description = info[field].split("\n", 1)
            break

    return subtitle, description


PKG_RX = re.compile(r"(^|, )([a-z0-9][-.+a-z0-9]*\w)")
def pkgHtmlize(text):
    return PKG_RX.sub(r"\1<a href='info:\2'>\2</a>", text)


class Window(KMainWindow):
    def __init__(self):
        KMainWindow.__init__(self)
        self.history = [QUrl("welcome:/")]
        self.posInHistory = 0
        self.createJinjaEnv()
        self.createActions()
        self.createUi()
        self.refresh()

    def createJinjaEnv(self):
        self.jinjaEnv = Environment()
        dataDir = os.path.dirname(os.readlink(__file__))
        tmplDir = os.path.join(dataDir, "templates")
        print(tmplDir)
        self.jinjaEnv.loader = FileSystemLoader(tmplDir)

    def createActions(self):
        self.backAction = KStandardAction.back(self.goBack, self)
        self.forwardAction = KStandardAction.forward(self.goForward, self)

    def createUi(self):
        self.toolBar().addAction(self.backAction)
        self.toolBar().addAction(self.forwardAction)

        self.searchLineEdit = KLineEdit(self)
        self.searchLineEdit.setClickMessage(i18n("Search"))
        self.toolBar().addWidget(self.searchLineEdit)

        self.packageView = QWebView(self)
        self.packageView.page().setLinkDelegationPolicy(QWebPage.DelegateAllLinks)
        self.setCentralWidget(self.packageView)

        QObject.connect(self.searchLineEdit, SIGNAL("returnPressed()"), self.startSearch)

        QObject.connect(self.packageView, SIGNAL("linkClicked(const QUrl&)"), self.openUrl)

        self.updateHistoryActions()
        self.searchLineEdit.setFocus()

    def updateHistoryActions(self):
        self.backAction.setEnabled(self.posInHistory > 0)
        self.forwardAction.setEnabled(self.posInHistory < len(self.history) - 1)

    def goBack(self):
        self.posInHistory -= 1
        self.refresh()
        self.updateHistoryActions()

    def goForward(self):
        self.posInHistory += 1
        self.refresh()
        self.updateHistoryActions()

    def startSearch(self):
        criterias = self.searchLineEdit.text()
        self.openUrl(QUrl("search:" + criterias))

    def refresh(self):
        self.openUrl(self.history[self.posInHistory], addToHistory=False)

    def openUrl(self, url, addToHistory=True):
        action = unicode(url.scheme())
        path = unicode(url.path())

        if action == "install":
            self.install(path)
            return
        if action == "remove":
            self.remove(path)
            return

        try:
            method = getattr(self, "url_" + action)
        except AttributeError:
            method = None

        if method:
            method(path)
            if addToHistory:
                self.history = self.history[:self.posInHistory + 1]
                self.history.append(url)
                self.posInHistory += 1
                self.updateHistoryActions()
        else:
            QDesktopServices.openUrl(url)

    def install(self, name):
        comment = i18n("Kapti needs your password to install %1.", name)
        self.installRemove(comment, pkgmanager.installCommand(name))

    def remove(self, name):
        comment = i18n("Kapti needs your password to remove %1.", name)
        self.installRemove(comment, pkgmanager.removeCommand(name))

    def installRemove(self, comment, cmd):
        cmd = "xterm -e '%s'" % cmd
        call(["kdesudo", "-d", "--comment", comment, "-c", cmd])
        pkgmanager.updateInstalledPackageList()
        self.refresh()

    def url_welcome(self, arg):
        tmpl = self.jinjaEnv.get_template("welcome.html")
        self.packageView.setHtml(tmpl.render())

    def url_search(self, arg):
        criterias = arg.split(" ")
        packages = pkgmanager.searchPackages(criterias)
        if packages:
            errorMessage = ""
        else:
            errorMessage = i18n("Sorry, could not find any package matching \"%1\".", " ".join(criterias))

        args = dict(
            packages=packages,
            errorMessage=errorMessage
            )
        tmpl = self.jinjaEnv.get_template("search.html")
        self.packageView.setHtml(tmpl.render(args))

    def url_info(self, name):
        info = pkgmanager.getPackageInfo(name)
        version = info["Version"]
        homepage = htmlize(info["Homepage"]) if ("Homepage" in info) else None
        subtitle, description = extractDescription(info)

        relatedPackages = []
        for key in "Section", \
            "Depends", "Suggests", "Recommends", \
            "Conflicts", "Replaces", "Bugs":
            if key in info:
                value = info[key]
                if key in ("Depends", "Suggests", "Recommends", "Conflicts", "Replaces"):
                    value = pkgHtmlize(value)
                else:
                    value = htmlize(value)
                relatedPackages.append((key, value))

        args = dict(
            name=name,
            version=version,
            isInstalled=pkgmanager.isPackageInstalled(name),
            subtitle=htmlize(subtitle),
            description=htmlize(description),
            relatedPackages=relatedPackages,
            homepage=homepage,
            )
        tmpl = self.jinjaEnv.get_template("info.html")
        self.packageView.setHtml(tmpl.render(args))


    def url_screenshot(self, name):
        args = dict(
            name=name,
            )
        tmpl = self.jinjaEnv.get_template("screenshot.html")
        self.packageView.setHtml(tmpl.render(args))


def main():
    aboutData = KAboutData(
        "kapti", # appName
        "", # catalogName
        ki18n("Kapti"), # programName
        "1.0")
    aboutData.setLicense(KAboutData.License_GPL_V3)
    aboutData.setShortDescription(ki18n("Simple frontend to install and remove packages"))
    aboutData.setCopyrightStatement(ki18n("(c) 2010 Aurélien Gâteau"))
    aboutData.setProgramIconName("application-x-deb")

    KCmdLineArgs.init(sys.argv, aboutData)

    options = KCmdLineOptions()
    options.add("+[search terms]", ki18n("Search terms"))
    KCmdLineArgs.addCmdLineOptions(options)

    app = KApplication()

    window = Window()
    args = KCmdLineArgs.parsedArgs()
    if args.count() > 0:
        lst = []
        for pos in range(args.count()):
            lst.append(unicode(args.arg(pos)))
        window.searchLineEdit.setText(" ".join(lst))
        QTimer.singleShot(0, window.startSearch)

    window.show()
    app.exec_()
    return 0


if __name__=="__main__":
    sys.exit(main())
# vi: ts=4 sw=4 et
